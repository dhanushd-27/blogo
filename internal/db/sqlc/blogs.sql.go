// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: blogs.sql

package sqlc

import (
	"context"
)

const createBlog = `-- name: CreateBlog :one
INSERT INTO blogs (
  title,
  content,
  user_id
)
VALUES ($1, $2, $3)
RETURNING id, title, content, user_id, created_at, updated_at
`

type CreateBlogParams struct {
	Title   string
	Content string
	UserID  int32
}

func (q *Queries) CreateBlog(ctx context.Context, arg CreateBlogParams) (Blog, error) {
	row := q.db.QueryRow(ctx, createBlog, arg.Title, arg.Content, arg.UserID)
	var i Blog
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Content,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteBlog = `-- name: DeleteBlog :execrows
DELETE FROM blogs
WHERE id = $1
`

func (q *Queries) DeleteBlog(ctx context.Context, id int32) (int64, error) {
	result, err := q.db.Exec(ctx, deleteBlog, id)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const getBlogByID = `-- name: GetBlogByID :one
SELECT id, title, content, user_id, created_at, updated_at
FROM blogs
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetBlogByID(ctx context.Context, id int32) (Blog, error) {
	row := q.db.QueryRow(ctx, getBlogByID, id)
	var i Blog
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Content,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listBlogs = `-- name: ListBlogs :many
SELECT id, title, content, user_id, created_at, updated_at
FROM blogs
ORDER BY id
LIMIT $1 OFFSET $2
`

type ListBlogsParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) ListBlogs(ctx context.Context, arg ListBlogsParams) ([]Blog, error) {
	rows, err := q.db.Query(ctx, listBlogs, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Blog
	for rows.Next() {
		var i Blog
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Content,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listBlogsByUserID = `-- name: ListBlogsByUserID :many
SELECT id, title, content, user_id, created_at, updated_at
FROM blogs
WHERE user_id = $1
ORDER BY id
LIMIT $2 OFFSET $3
`

type ListBlogsByUserIDParams struct {
	UserID int32
	Limit  int32
	Offset int32
}

func (q *Queries) ListBlogsByUserID(ctx context.Context, arg ListBlogsByUserIDParams) ([]Blog, error) {
	rows, err := q.db.Query(ctx, listBlogsByUserID, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Blog
	for rows.Next() {
		var i Blog
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Content,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBlog = `-- name: UpdateBlog :one
UPDATE blogs
SET
  title = $2,
  content = $3,
  updated_at = CURRENT_TIMESTAMP
WHERE id = $1
RETURNING id, title, content, user_id, created_at, updated_at
`

type UpdateBlogParams struct {
	ID      int32
	Title   string
	Content string
}

func (q *Queries) UpdateBlog(ctx context.Context, arg UpdateBlogParams) (Blog, error) {
	row := q.db.QueryRow(ctx, updateBlog, arg.ID, arg.Title, arg.Content)
	var i Blog
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Content,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
